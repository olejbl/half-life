import { type NextApiRequest, type NextApiResponse } from "next";
import { prisma } from "~/server/db";
import Jimp from "jimp";

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  const { slug } = req.query;
  console.log(slug);

  if (!slug || typeof slug !== "string") {
    return res.status(400).json({
      error: "Missing slug, should be a string.",
    });
  }

  // Output the image as a string for horizontally drawing displays
  function horizontal1bit(
    data: Buffer,
    canvasWidth: number,
    canvasHeight: number
  ) {
    let output_string = "";
    let output_index = 0;

    let byteIndex = 7;
    let number = 0;

    // format is RGBA, so move 4 steps per pixel
    for (let index = 0; index < data.length; index += 3) {
      // Get the average of the RGB (we ignore A)
      const avg = (data[index] + data[index + 1] + data[index + 2]) / 3;
      if (avg > 128) {
        number += Math.pow(2, byteIndex);
      }
      byteIndex--;

      // if this was the last pixel of a row or the last pixel of the
      // image, fill up the rest of our byte with zeros so it always contains 8 bits
      if (
        (index != 0 && (index / 3 + 1) % canvasWidth == 0) ||
        index == data.length - 3
      ) {
        // for(let i=byteIndex;i>-1;i--){
        // number += Math.pow(2, i);
        // }
        byteIndex = -1;
      }

      // When we have the complete 8 bits, combine them into a hex value
      if (byteIndex < 0) {
        let byteSet = number.toString(16);
        if (byteSet.length == 1) {
          byteSet = "0" + byteSet;
        }
        const b = "0x" + byteSet;
        output_string += b + ", ";
        output_index++;
        if (output_index >= 16) {
          output_string += "\n";
          output_index = 0;
        }
        number = 0;
        byteIndex = 7;
      }
    }
    console.log(output_string);
    return output_string;
  }

  //https://codesandbox.io/s/suspicious-wind-p3htvj?file=/src/components/JimpDemo/JimpDemo.js
  //   https://notisrac.github.io/FileToCArray/
  //https://javl.github.io/image2cpp/
  //https://github.com/javl/image2cpp/blob/master/index.html
  //https://learn.adafruit.com/monochrome-oled-breakouts/arduino-library-and-examples

  const baseImage = await Jimp.read(
    `https://cdn.sanity.io/images/07sn9sev/production/28f52918296a22ce6e357e8c65aaa945c293817d-3092x3865.jpg?rect=1000,1050,512,128&h=32&w=128`
  )
    .then((image) => {
      const cppImg = image
        .resize(128, 32)
        .greyscale()
        .contrast(1)
        // .posterize(2)
        .getBufferAsync("image/bmp")
        .then((bmp) => {
          //   const buffer = Buffer.alloc(1028 + 54);
          //   const length = buffer.write(bmp.toString("hex"));
          //   console.log(buffer);
          const header = bmp.subarray(0, 54);
          const body = bmp.subarray(54);
          //   console.log(length);
          console.log("header");
          console.log(header);
          console.log("header END");
          const cppBuffer = Buffer.from(body);
          cppBuffer.write(horizontal1bit(body, 128, 32));
          console.log("START cppBuffer");
          console.log(cppBuffer);
          console.log("END cppBuffer");

          res.send(horizontal1bit(body, 128, 32));
        });
    })
    .catch((err) => {
      return res.send(err);
    });
};
export default handler;

//0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0xc1, 0xff, 0xff,
// 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x03, 0x07, 0xff, 0xff,
// 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xf0, 0x00, 0x00, 0x18, 0x1f, 0xff, 0xff,
// 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x67, 0x80, 0x00, 0x00, 0x10, 0x7f, 0xff, 0xff,
// 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xfe, 0x70, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0xce, 0x80, 0x1f, 0xff, 0xff, 0xfe, 0x40, 0x07, 0x03, 0x80, 0x03, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0xc6, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x80, 0x3c, 0x00, 0x20, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xfb, 0x01, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x80, 0x00, 0x07, 0xff, 0xff, 0xf6, 0x07, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x80, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x1f, 0xf0, 0x00, 0x1e, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x3f, 0xe0, 0x00, 0x1f, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xb0, 0x7f, 0xe0, 0x00, 0x1e, 0x07, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x60, 0xfd, 0x60, 0x00, 0x3f, 0x87, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x41, 0xfe, 0x00, 0x00, 0x1b, 0x87, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x01, 0xf8, 0x00, 0x40, 0x07, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0xe0, 0x0f, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x70, 0x1f, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0xff, 0xe7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x01, 0xff, 0xe7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xff, 0xe7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x0f, 0xff, 0xe7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x07, 0xff, 0xe7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x1f, 0xff, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x03, 0xff, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xbf, 0xc0, 0x01, 0xff, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x7f, 0xc0, 0x1f, 0xff, 0xc7, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xc0, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3f, 0xe3, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff,
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x07, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff
